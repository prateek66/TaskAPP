{"version":3,"sources":["layout/Header.js","components/List.js","components/CreateTask.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","color","light","NavbarBrand","className","NavbarText","List","props","useState","task","setTask","useEffect","getTask","Axios","get","then","data","console","log","alltask","catch","err","Card","CardBody","CardTitle","tag","map","e","i","key","Name","Badge","staus","Task_Status","Date","Due_Date","toLocaleString","onClick","id","_id","toast","type","Button","mode","Createtask","Priority","onchangeDate","date","htmlFor","onChange","target","value","aria-describedby","placeholder","required","selected","onSelect","dateFormat","minDate","placeholderText","calendarClassName","post","App","createMode","setCreateMode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.229b6d96.chunk.js","sourcesContent":["//TODO: DONE set NavbarBrand to go to home page and export Header\n\nimport React from \"react\";\nimport { Navbar, NavbarBrand, NavbarText } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => {\n  return (\n    <Navbar color=\"info\" light>\n      <NavbarBrand className=\"text-white\">\n       App\n      </NavbarBrand>\n      <NavbarText className=\"text-white float-right\">\n       To-Do web application\n      </NavbarText>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { Badge } from 'reactstrap';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n  import 'react-toastify/dist/ReactToastify.css';\r\nimport Axios from \"axios\";\r\n\r\nconst List = (props) => {\r\n\r\n    const[task,setTask]= useState([])\r\n\r\n   const className = (staus)=>{\r\n       if(staus === 'To-Do') return 'primary'\r\n       if(staus === 'Review') return 'secondary'\r\n       if(staus === 'Completed') return 'success'\r\n   }\r\n\r\n   const changeStaus = (id) =>{\r\n        Axios.get('https://internship-task-app.herokuapp.com/changeStatus/'+id).then(data=>{\r\n           \r\n toast(\"Status has been changed!\",{type:'success'})\r\n          getTask();\r\n       }).catch(err=>{\r\n           console.log(err)\r\n\r\n       })\r\n   }\r\n\r\n   useEffect(()=>{\r\n      getTask();\r\n   },[])\r\n\r\n\r\n   const getTask =()=>{\r\n        Axios.get('https://internship-task-app.herokuapp.com/viewall').then(data=>{\r\n           console.log(data.data.alltask)\r\n           setTask([...data.data.alltask])\r\n       }).catch(err=>{\r\n           console.log(err)\r\n\r\n       })\r\n   }\r\n   \r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle tag=\"h5\">To-Do List</CardTitle>\r\n          <ul className=\"list-group\">\r\n            {task.map((e,i)=>{\r\n                return(\r\n                    <li key={i} className=\"list-group-item\">{e.Name} <Badge  color={className(e.Task_Status)}>{e.Task_Status}</Badge>&nbsp;{new Date(e.Due_Date).toLocaleString()}\r\n             <Badge className=\"float-right\" onClick={()=>changeStaus(e._id)} color=\"warning\"><i className=\"fas fa-edit\"></i></Badge></li>\r\n          \r\n                )\r\n            })}\r\n            </ul>\r\n          <Button onClick={()=>props.mode(true)}>Create Task</Button>\r\n        </CardBody>\r\n      </Card>\r\n       <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from 'react'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Toast, ToastBody, ToastHeader ,\r\n  CardTitle,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport Datepicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n  import 'react-toastify/dist/ReactToastify.css';\r\nimport Axios from 'axios';\r\n\r\nexport function Createtask(props) {\r\n\r\n    const [task,setTask]= useState({\r\n        Name:'',\r\n        Priority:'',\r\n        Due_Date:''\r\n    })\r\n\r\n   const onchangeDate = date=>{\r\n       setTask({...task,Due_Date:date})\r\n   }\r\n    const onchangeName = Name=>{\r\n       setTask({...task,Name})\r\n   }\r\n    const onchangePriority = Priority=>{\r\n       setTask({...task,Priority})\r\n   }\r\n\r\n   const submit = ()=>{\r\n       console.log(task)\r\n\r\n       if(task.Name === '' || task.Priority === '' || task.Due_Date === '' ){\r\n       toast(\"Please fill all fields\",{type:'error'})\r\n       return;  \r\n       }\r\n      Axios.post('https://internship-task-app.herokuapp.com/create',task).then(data=>{\r\n       toast(\"New task is added in To-Do list!\",{type:'success'})\r\n        props.mode(false)\r\n         \r\n      }).catch((err)=>{\r\n        toast(\"Something went wrong!\",{type:'error'});\r\n      })\r\n   }\r\n    \r\n\r\n    return (\r\n       <div className=\"container\">\r\n           \r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle tag=\"h5\">Create Task</CardTitle>\r\n          \r\n          <form>\r\n               <div className=\"form-group\">\r\n    <label htmlFor=\"exampleInputEmail1\">Task Name</label>\r\n    <input type=\"email\" className=\"form-control\" onChange={e=>onchangeName(e.target.value)} value={task.Name} id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter task name\" />\r\n    </div>\r\n  <div className=\"form-group\">\r\n      <label htmlFor=\"inputGroupSelect02\">Set task priority</label>\r\n  <select className=\"custom-select form-control\" onChange={e=>onchangePriority(e.target.value)} value={task.Priority} id=\"inputGroupSelect02\">\r\n    <option  value=\"\">Options</option>\r\n    <option value=\"Low\">Low</option>\r\n    <option value=\"Medium\">Medium</option>\r\n    <option value=\"High\">High</option>\r\n  </select>\r\n</div>\r\n<div className=\"form-group\">\r\n      <label >Pick date of completion</label>\r\n      <br/>\r\n <Datepicker id=\"inputGroupSelect03\"\r\n                    required\r\n                    selected={task.Due_Date}\r\n                    onSelect={onchangeDate}\r\n                    onChange={onchangeDate}\r\n                     className=\"form-control\"\r\n                    dateFormat=\"Pp\"\r\n                    minDate={new Date()}\r\n                    placeholderText=\"Select a date\"\r\n                    calendarClassName=\"form-control\"\r\n                   \r\n                />\r\n</div>\r\n          </form>\r\n\r\n          <Button onClick={submit} >Create Task</Button>\r\n          <Button onClick={()=>props.mode(false)} color=\"secondary\">Cancel</Button>\r\n        </CardBody>\r\n      </Card>\r\n      \r\n    </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\n\n\n// react-router-dom3\n\n// react toastify stuffs\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// bootstrap css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n\n\nimport Header from \"./layout/Header\";\nimport List from \"./components/List\";\nimport { Createtask } from \"./components/CreateTask\";\nimport { ToastContainer } from \"react-toastify\";\n\n\nconst App = () => {\n \n    const [createMode,setCreateMode] = useState(false)\n\n  // getting contact  when component did mount\n  useEffect(() => {\n    // getContacts();\n  }, []);\n\n  return (\n    \n       <>\n        <Header  />\n        {createMode ?  <Createtask mode={setCreateMode} /> :\n          <List mode={setCreateMode} />}\n     \n       <ToastContainer />\n       </>\n        \n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}